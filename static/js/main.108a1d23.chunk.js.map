{"version":3,"sources":["../node_modules/encoding/lib sync","App.js","serviceWorker.js","index.js"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","apiURL","socketURL","renderRow","ticker","balance","currency","value","key","className","Boolean","window","location","hostname","match","ReactDOM","render","useState","portfolio","setPortfolio","secretToken","setToken","loadPortfolio","useCallback","a","api","OpenAPI","useEffect","type","onChange","event","target","placeholder","positions","map","expectedYield","renderPortfolio","document","querySelector","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iJAAA,SAASA,EAAoBC,GAC5B,IAAIC,EAAI,IAAIC,MAAM,uBAAyBF,EAAM,KAEjD,MADAC,EAAEE,KAAO,mBACHF,EAEPF,EAAoBK,KAAO,WAAa,MAAO,IAC/CL,EAAoBM,QAAUN,EAC9BO,EAAOC,QAAUR,EACjBA,EAAoBS,GAAK,K,+ICLnBC,EAAS,wCACTC,EAAY,0DAsDlB,SAASC,EAAT,GAA0D,IAArCC,EAAoC,EAApCA,OAAQC,EAA4B,EAA5BA,QAASC,EAAmB,EAAnBA,SAAUC,EAAS,EAATA,MAC5C,OACI,yBAAKC,IAAKJ,EAAQK,UAAU,OACxB,yBAAKA,UAAU,UAAUL,GACzB,yBAAKK,UAAU,WAAWJ,GAC1B,yBAAKI,UAAU,SAASF,GACxB,yBAAKE,UAAU,YAAYH,ICpDnBI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,mBFAT,WAAgB,IAAD,EACgBC,mBAAS,MADzB,mBACXC,EADW,KACAC,EADA,OAEcF,mBAAS,MAFvB,mBAEXG,EAFW,KAEEC,EAFF,KAIZC,EAAgBC,sBAAW,sBAAC,4BAAAC,EAAA,yDACzBJ,EADyB,wDAExBK,EAAM,IAAIC,IAAQ,CAAEzB,SAAQmB,cAAalB,cAFjB,KAG9BiB,EAH8B,SAGXM,EAAIP,YAHO,6EAI/B,CAACE,IAKJ,OAJAO,qBAAU,WACNL,MACD,CAACA,IAGA,yBAAKb,UAAU,OACX,2BACIA,UAAU,QACVmB,KAAK,OACLC,SAMZ,SAAuBC,GACnBT,EAASS,EAAMC,OAAOxB,QANdyB,YAAY,mCAU5B,SAAyBd,GACrB,OACI,6BACKf,EAAU,CACPC,OAAQ,iCACRC,QAAS,+DACTC,SAAU,uCACVC,MAAO,iEAEVW,GACGA,EAAUe,UAAUC,KAChB,gBAAG9B,EAAH,EAAGA,OAAQC,EAAX,EAAWA,QAAX,IAAoB8B,cAApB,OACIhC,EAAU,CACNC,SACAC,UACAC,SAJR,EAAqCA,SAK7BC,MALR,EAA+CA,YAnBtD6B,CAAgBlB,MErBb,MAASmB,SAASC,cAAc,UD2H1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.108a1d23.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 118;","import React, { useEffect, useState, useCallback } from 'react';\r\nimport './App.css';\r\nimport OpenAPI from '@tinkoff/invest-openapi-js-sdk/build/openApi';\r\nconst apiURL = 'https://api-invest.tinkoff.ru/openapi';\r\nconst socketURL = 'wss://api-invest.tinkoff.ru/openapi/md/v1/md-openapi/ws';\r\n\r\nexport function App() {\r\n    const [portfolio, setPortfolio] = useState(null);\r\n    const [secretToken, setToken] = useState(null);\r\n\r\n    const loadPortfolio = useCallback(async () => {\r\n        if (!secretToken) return;\r\n        const api = new OpenAPI({ apiURL, secretToken, socketURL });\r\n        setPortfolio(await api.portfolio());\r\n    }, [secretToken]);\r\n    useEffect(() => {\r\n        loadPortfolio();\r\n    }, [loadPortfolio]);\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <input\r\n                className=\"token\"\r\n                type=\"text\"\r\n                onChange={onChangeToken}\r\n                placeholder=\"токен\"\r\n            />\r\n            {renderPortfolio(portfolio)}\r\n        </div>\r\n    );\r\n    function onChangeToken(event) {\r\n        setToken(event.target.value);\r\n    }\r\n}\r\n\r\nfunction renderPortfolio(portfolio) {\r\n    return (\r\n        <div>\r\n            {renderRow({\r\n                ticker: 'Тикер',\r\n                balance: 'Количество',\r\n                currency: 'Валюта',\r\n                value: 'Доходность',\r\n            })}\r\n            {portfolio &&\r\n                portfolio.positions.map(\r\n                    ({ ticker, balance, expectedYield: { currency, value } }) =>\r\n                        renderRow({\r\n                            ticker,\r\n                            balance,\r\n                            currency,\r\n                            value,\r\n                        })\r\n                )}\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction renderRow({ ticker, balance, currency, value }) {\r\n    return (\r\n        <div key={ticker} className=\"row\">\r\n            <div className=\"ticker\">{ticker}</div>\r\n            <div className=\"balance\">{balance}</div>\r\n            <div className=\"value\">{value}</div>\r\n            <div className=\"currency\">{currency}</div>\r\n        </div>\r\n    );\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport { App } from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.querySelector('#root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}