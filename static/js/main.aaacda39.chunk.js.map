{"version":3,"sources":["../node_modules/encoding/lib sync","App.js","serviceWorker.js","index.js"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","apiURL","socketURL","renderRow","ticker","balance","currency","value","key","className","Boolean","window","location","hostname","match","ReactDOM","render","useState","portfolio","setPortfolio","secretToken","setToken","useEffect","a","api","OpenAPI","loadPortfolio","type","onChange","event","target","placeholder","positions","map","expectedYield","renderPortfolio","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iJAAA,SAASA,EAAoBC,GAC5B,IAAIC,EAAI,IAAIC,MAAM,uBAAyBF,EAAM,KAEjD,MADAC,EAAEE,KAAO,mBACHF,EAEPF,EAAoBK,KAAO,WAAa,MAAO,IAC/CL,EAAoBM,QAAUN,EAC9BO,EAAOC,QAAUR,EACjBA,EAAoBS,GAAK,K,+ICLnBC,EAAS,wCACTC,EAAY,0DAgDlB,SAASC,EAAT,GAAwD,IAApCC,EAAmC,EAAnCA,OAAQC,EAA2B,EAA3BA,QAASC,EAAkB,EAAlBA,SAAUC,EAAQ,EAARA,MAC3C,OAAO,yBAAKC,IAAKJ,EAAQK,UAAU,OAC/B,yBAAKA,UAAU,UAAUL,GACzB,yBAAKK,UAAU,WAAWJ,GAC1B,yBAAKI,UAAU,SAASF,GACxB,yBAAKE,UAAU,YAAYH,IC7CfI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,mBFAT,WAAgB,IAAD,EACgBC,mBAAS,MADzB,mBACXC,EADW,KACAC,EADA,OAEcF,mBAAS,MAFvB,mBAEXG,EAFW,KAEEC,EAFF,KAalB,OAVAC,qBAAU,WAAM,4CACZ,8BAAAC,EAAA,yDACSH,EADT,wDAEUI,EAAM,IAAIC,IAAQ,CAAExB,SAAQmB,cAAalB,cAFnD,SAG4BsB,EAAIN,YAHhC,OAGUA,EAHV,OAIIC,EAAaD,GAJjB,4CADY,uBAAC,WAAD,wBAOZQ,KACD,CAACN,IAGA,yBAAKX,UAAU,OACX,2BAAOA,UAAU,QAAQkB,KAAK,OAAOC,SAI7C,SAAuBC,GACnBR,EAASQ,EAAMC,OAAOvB,QAL4CwB,YAAY,mCAUtF,SAAyBb,GACrB,OAAO,6BACFf,EAAU,CACPC,OAAQ,iCACRC,QAAS,+DACTC,SAAU,uCACVC,MAAO,iEAGPW,GAAaA,EAAUc,UAAUC,KAC7B,gBAAE7B,EAAF,EAAEA,OAAQC,EAAV,EAAUA,QAAV,IAAmB6B,cAAnB,OAAyD/B,EAAU,CAC/DC,SACAC,UACAC,SAHJ,EAAmCA,SAI/BC,MAJJ,EAA6CA,YAnBhD4B,CAAgBjB,MEhBb,MAASkB,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.aaacda39.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 118;","import React, {useEffect, useState} from 'react';\r\nimport './App.css';\r\nimport OpenAPI from '@tinkoff/invest-openapi-js-sdk/build/openApi';\r\nconst apiURL = 'https://api-invest.tinkoff.ru/openapi';\r\nconst socketURL = 'wss://api-invest.tinkoff.ru/openapi/md/v1/md-openapi/ws';\r\n\r\nexport function App() {\r\n    const [portfolio, setPortfolio] = useState(null);\r\n    const [secretToken, setToken] = useState(null);\r\n    useEffect(() => {\r\n        async function loadPortfolio() {\r\n            if (!secretToken) return;\r\n            const api = new OpenAPI({ apiURL, secretToken, socketURL });\r\n            const portfolio = await api.portfolio();\r\n            setPortfolio(portfolio);\r\n        }\r\n        loadPortfolio();\r\n    }, [secretToken]);\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <input className=\"token\" type=\"text\" onChange={onChangeToken} placeholder=\"токен\"/>\r\n            {renderPortfolio(portfolio)}\r\n        </div>\r\n    );\r\n    function onChangeToken(event) {\r\n        setToken(event.target.value);\r\n    }\r\n}\r\n\r\n\r\nfunction renderPortfolio(portfolio) {\r\n    return <div>\r\n        {renderRow({\r\n            ticker: 'Тикер',\r\n            balance: 'Количество',\r\n            currency: 'Валюта',\r\n            value: 'Доходность'\r\n        })}\r\n        {\r\n            portfolio && portfolio.positions.map(\r\n                ({ticker, balance, expectedYield: {currency, value}}) => renderRow({\r\n                    ticker,\r\n                    balance,\r\n                    currency,\r\n                    value\r\n                })\r\n            )\r\n        }\r\n    </div>\r\n}\r\n\r\nfunction renderRow({ticker, balance, currency, value}) {\r\n    return <div key={ticker} className=\"row\">\r\n        <div className=\"ticker\">{ticker}</div>\r\n        <div className=\"balance\">{balance}</div>\r\n        <div className=\"value\">{value}</div>\r\n        <div className=\"currency\">{currency}</div>\r\n    </div>\r\n}\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}